@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": "",
    "treatFinalFieldsAsMandatory": false
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": true,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": false,
    "cutInterfaceStructures": false,
    "cutDataStructures": false,
    "cutGetterAndSetter": true,
    "cutConstructors": true
  },
  "graphTraversal": {
    "forwardDepth": 6,
    "backwardDepth": 6,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false, // root node is included
    "useMethodCallsForStructureDiagram": "ForwardOnly" // ForwardOnly, BothDirections, No
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 2,
    "showDetailedClassStructure": true
  },
  "rootClass": "com.ssafy.member.model.mapper.MemberMapper",
  "extensionCallbackMethod": "" // qualified.class.name#methodName - signature: public static String method(String)
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline
    

'nodes 
subgraph cluster_109727380 { 
   	label=ssafy
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   subgraph cluster_1429279540 { 
   	label=member
	labeljust=l
	fillcolor="#d8d8d8"
	style=filled
   
   MemberController1628315945[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)MemberController</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   hashUtill: HashUtill [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   memberService: MemberService [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >- adminUserList(map: Map&lt;String, String&gt;, session: HttpSession): ModelAndView</TD></TR>
<TR><TD ALIGN="LEFT" >+ join(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ joinMember(map: Map&lt;String, String&gt;): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ login(map: Map&lt;String, String&gt;, model: Model, request: HttpServletRequest, response: HttpServletResponse, session: HttpSession): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ logout(session: HttpSession): String</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

MemberMapper1954756877[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(I)MemberMapper</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ deleteRefreshToken(map: Map&lt;String, String&gt;)</TD></TR>
<TR><TD ALIGN="LEFT" >+ deleteUser(userId: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ getRefreshToken(userId: String): Object</TD></TR>
<TR><TD ALIGN="LEFT" >+ getUserInfo(userId: String): MemberDto</TD></TR>
<TR><TD ALIGN="LEFT" >+ idCheck(userId: String): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ joinMember(memberDto: MemberDto): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ loginMember(map: Map&lt;String, String&gt;): MemberDto</TD></TR>
<TR><TD ALIGN="LEFT" >+ memberList(): List&lt;MemberDto&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ modify(memberDto: MemberDto): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ saveRefreshToken(map: Map&lt;String, String&gt;)</TD></TR>
<TR><TD ALIGN="LEFT" >+ searchMemberList(map: Map&lt;String, String&gt;): List&lt;MemberDto&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ userInfo(userId: String): MemberDto</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#F1E5FD"
];

MemberRestController1628315945[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)MemberRestController</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   jwtUtil: JWTUtil [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   memberService: MemberService [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >- adminUserList(session: HttpSession): ResponseEntity&lt;?&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >- deleteUser(map: Map&lt;String, String&gt;, session: HttpSession): ResponseEntity&lt;?&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >- exceptionHandling(e: Exception): ResponseEntity&lt;?&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ getInfo(userId: String, request: HttpServletRequest): ResponseEntity&lt;Map&lt;String, Object&gt;&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ join(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ joinMember(map: Map&lt;String, String&gt;): ResponseEntity&lt;?&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ login(map: Map&lt;String, String&gt;, model: Model, request: HttpServletRequest, response: HttpServletResponse, session: HttpSession): ResponseEntity&lt;?&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >- modify(map: Map&lt;String, String&gt;, session: HttpSession): ResponseEntity&lt;?&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >- mvModifyUserInfo(map: Map&lt;String, String&gt;, session: HttpSession): ResponseEntity&lt;?&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ refreshToken(memberDto: MemberDto, request: HttpServletRequest): ResponseEntity&lt;?&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ removeToken(userId: String): ResponseEntity&lt;?&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >- searchMemberList(map: Map&lt;String, String&gt;, session: HttpSession): ResponseEntity&lt;?&gt;</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

MemberServiceImpl678679619[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)MemberServiceImpl</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   memberMapper: MemberMapper [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ deleRefreshToken(userId: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ deleteUser(userId: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ getRefreshToken(userId: String): Object</TD></TR>
<TR><TD ALIGN="LEFT" >+ getUserInfo(userId: String): MemberDto</TD></TR>
<TR><TD ALIGN="LEFT" >+ idCheck(userId: String): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ joinMember(memberDto: MemberDto): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ loginMember(map: Map&lt;String, String&gt;): MemberDto</TD></TR>
<TR><TD ALIGN="LEFT" >+ memberList(): List&lt;MemberDto&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ modify(memberDto: MemberDto): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ saveRefreshToken(userId: String, refreshToken: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ searchMemberList(map: Map&lt;String, String&gt;): List&lt;MemberDto&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ userInfo(userId: String): MemberDto</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 
} 

'edges    
MemberController1628315945 -> MemberServiceImpl678679619[label="memberService
[0..1]", arrowhead=none];
MemberRestController1628315945 -> MemberServiceImpl678679619[label="memberService
[0..1]", arrowhead=none];
MemberServiceImpl678679619 -> MemberMapper1954756877[label="memberMapper
[0..1]"];
    
}
@enduml